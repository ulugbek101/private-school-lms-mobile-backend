# Generated by Django 5.1.3 on 2024-11-16 20:06

import api.managers
import django.contrib.auth.validators
import django.utils.timezone
import phonenumber_field.modelfields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(help_text="User's email address (used as the username).", max_length=50, unique=True)),
                ('first_name', models.CharField(help_text="User's first name.", max_length=50)),
                ('last_name', models.CharField(help_text="User's last name.", max_length=50)),
                ('profile_image', models.ImageField(blank=True, default='profile-images/user-default.png', help_text="Path to the user's profile image.", null=True, upload_to='profile-images/')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text="User's phone number in international format.", max_length=128, null=True, region=None)),
                ('is_studying', models.BooleanField(default=True, help_text='Indicates whether the student is currently studying.')),
                ('role', models.CharField(choices=[('STUDENT', 'Student'), ('TEACHER', 'Ustoz'), ('ADMIN', 'Admin'), ('SUPERUSER', 'Superadmin')], default='STUDENT', help_text='Role of the user (e.g., Student, Teacher, Admin, Superuser).', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            managers=[
                ('objects', api.managers.UserModelManager()),
            ],
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('api.user',),
            managers=[
                ('objects', api.managers.AdminManager()),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('api.user',),
            managers=[
                ('objects', api.managers.StudentManager()),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('api.user',),
            managers=[
                ('objects', api.managers.TeacherManager()),
            ],
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(fields=('first_name', 'last_name'), name='unique_full_name'),
        ),
    ]
